nimTitle	blockstore	necsus/util/blockstore.html	module src/necsus/util/blockstore		0
nim	Entry	necsus/util/blockstore.html#Entry	type Entry		9
nim	BlockStore	necsus/util/blockstore.html#BlockStore	type BlockStore		11
nim	BlockIter	necsus/util/blockstore.html#BlockIter	object BlockIter		18
nim	newBlockStore	necsus/util/blockstore.html#newBlockStore,SomeInteger	proc newBlockStore[V](size: SomeInteger): BlockStore[V]		22
nim	isFirst	necsus/util/blockstore.html#isFirst,BlockIter	proc isFirst(iter: BlockIter): bool		28
nim	isDone	necsus/util/blockstore.html#isDone,BlockIter	proc isDone(iter: BlockIter): bool		31
nim	len	necsus/util/blockstore.html#len,BlockStore[V]	proc len[V](blockstore: var BlockStore[V]): uint		34
nim	reserve	necsus/util/blockstore.html#reserve,BlockStore[V]	proc reserve[V](blockstore: var BlockStore[V]): Entry[V]		38
nim	index	necsus/util/blockstore.html#index,Entry[V]	proc index[V](entry: Entry[V]): uint		58
nim	value	necsus/util/blockstore.html#value.t,Entry[V]	template value[V](entry: Entry[V]): var V		61
nim	commit	necsus/util/blockstore.html#commit,Entry[V]	proc commit[V](entry: Entry[V])		64
nim	set	necsus/util/blockstore.html#set.t,Entry[V],V	template set[V](entry: Entry[V]; newValue: V)		68
nim	push	necsus/util/blockstore.html#push.t,BlockStore[V],V	template push[V](store: var BlockStore[V]; newValue: V): uint		73
nim	del	necsus/util/blockstore.html#del,BlockStore[V],uint	proc del[V](store: var BlockStore[V]; idx: uint): V		79
nim	`[]`	necsus/util/blockstore.html#[],BlockStore[V],uint	proc `[]`[V](store: BlockStore[V]; idx: uint): var V		89
nim	`[]=`	necsus/util/blockstore.html#[]=.t,BlockStore[V],uint,V	template `[]=`[V](store: BlockStore[V]; idx: uint; newValue: V)		93
nim	next	necsus/util/blockstore.html#next,BlockStore[V],BlockIter	proc next[V](store: var BlockStore[V]; iter: var BlockIter): ptr V		97
nim	items	necsus/util/blockstore.html#items.i,BlockStore[V]	iterator items[V](store: var BlockStore[V]): var V		109
