Outside	necsus/compiletime/systemGen.html#Outside	GenerateHook.Outside	
Early	necsus/compiletime/systemGen.html#Early	GenerateHook.Early	
Standard	necsus/compiletime/systemGen.html#Standard	GenerateHook.Standard	
Late	necsus/compiletime/systemGen.html#Late	GenerateHook.Late	
BeforeLoop	necsus/compiletime/systemGen.html#BeforeLoop	GenerateHook.BeforeLoop	
LoopStart	necsus/compiletime/systemGen.html#LoopStart	GenerateHook.LoopStart	
AfterSystem	necsus/compiletime/systemGen.html#AfterSystem	GenerateHook.AfterSystem	
LoopEnd	necsus/compiletime/systemGen.html#LoopEnd	GenerateHook.LoopEnd	
BeforeTeardown	necsus/compiletime/systemGen.html#BeforeTeardown	GenerateHook.BeforeTeardown	
GenerateHook	necsus/compiletime/systemGen.html#GenerateHook	systemGen: GenerateHook	
AppInputs	necsus/compiletime/systemGen.html#AppInputs	systemGen: AppInputs	
GenerateContext	necsus/compiletime/systemGen.html#GenerateContext	systemGen: GenerateContext	
DirectiveKind	necsus/compiletime/systemGen.html#DirectiveKind	systemGen: DirectiveKind	
WorldField	necsus/compiletime/systemGen.html#WorldField	systemGen: WorldField	
RawNestedArg	necsus/compiletime/systemGen.html#RawNestedArg	systemGen: RawNestedArg	
NestedArgsExtractor	necsus/compiletime/systemGen.html#NestedArgsExtractor	systemGen: NestedArgsExtractor	
HookGenerator	necsus/compiletime/systemGen.html#HookGenerator	systemGen: HookGenerator	
NameChooser	necsus/compiletime/systemGen.html#NameChooser	systemGen: NameChooser	
SystemArgExtractor	necsus/compiletime/systemGen.html#SystemArgExtractor	systemGen: SystemArgExtractor	
DirectiveGen	necsus/compiletime/systemGen.html#DirectiveGen	systemGen: DirectiveGen	
SystemArg	necsus/compiletime/systemGen.html#SystemArg	systemGen: SystemArg	
newGenerator	necsus/compiletime/systemGen.html#newGenerator,string,HookGenerator[TupleDirective],proc(ArchetypeBuilder[ComponentDef],TupleDirective),NameChooser[TupleDirective],proc(string,TupleDirective),SystemArgExtractor[TupleDirective],NestedArgsExtractor[TupleDirective]	systemGen: newGenerator(ident: string; generate: HookGenerator[TupleDirective]; archetype: proc (\n    builder: var ArchetypeBuilder[ComponentDef]; dir: TupleDirective) = noArchetype;\n             chooseName: NameChooser[TupleDirective] = defaultName; worldFields: proc (\n    name: string; dir: TupleDirective): seq[WorldField] = defaultWorldField;\n             systemArg: SystemArgExtractor[TupleDirective] = defaultSystemArg;\n    nestedArgs: NestedArgsExtractor[TupleDirective] = defaultNestedArgs): DirectiveGen	
newGenerator	necsus/compiletime/systemGen.html#newGenerator,string,HookGenerator[MonoDirective],proc(ArchetypeBuilder[ComponentDef],MonoDirective),NameChooser[MonoDirective],proc(DirectiveSet[SystemArg],MonoDirective),proc(string,MonoDirective),SystemArgExtractor[MonoDirective],NestedArgsExtractor[MonoDirective]	systemGen: newGenerator(ident: string; generate: HookGenerator[MonoDirective]; archetype: proc (\n    builder: var ArchetypeBuilder[ComponentDef]; dir: MonoDirective) = noArchetype;\n             chooseName: NameChooser[MonoDirective] = defaultName; systemReturn: proc (\n    args: DirectiveSet[SystemArg]; returns: MonoDirective): Option[NimNode] = defaultSystemReturn;\n    worldFields: proc (name: string; dir: MonoDirective): seq[WorldField] = defaultWorldField;\n             systemArg: SystemArgExtractor[MonoDirective] = defaultSystemArg;\n             nestedArgs: NestedArgsExtractor[MonoDirective] = defaultNestedArgs): DirectiveGen	
newGenerator	necsus/compiletime/systemGen.html#newGenerator,string,HookGenerator[void],proc(string),SystemArgExtractor[void]	systemGen: newGenerator(ident: string; generate: HookGenerator[void]; worldFields: proc (\n    name: string): seq[WorldField] = defaultWorldFieldNone;\n             systemArg: SystemArgExtractor[void] = defaultSystemArgNone): DirectiveGen	
`==`	necsus/compiletime/systemGen.html#==,DirectiveGen,DirectiveGen	systemGen: `==`(a, b: DirectiveGen): bool	
hash	necsus/compiletime/systemGen.html#hash,DirectiveGen	systemGen: hash(gen: DirectiveGen): Hash	
newSystemArg	necsus/compiletime/systemGen.html#newSystemArg,NimNode,DirectiveGen,string,string,seq[SystemArg],T	systemGen: newSystemArg[T: TupleDirective | MonoDirective | void](source: NimNode;\n    generator: DirectiveGen; originalName: string; name: string;\n    nestedArgs: seq[SystemArg] = @[]; directive: T): SystemArg	
`==`	necsus/compiletime/systemGen.html#==,SystemArg,SystemArg	systemGen: `==`(a, b: SystemArg): bool	
hash	necsus/compiletime/systemGen.html#hash,SystemArg	systemGen: hash(arg: SystemArg): Hash	
generateName	necsus/compiletime/systemGen.html#generateName,SystemArg	systemGen: generateName(arg: SystemArg): string	
buildArchetype	necsus/compiletime/systemGen.html#buildArchetype,ArchetypeBuilder[ComponentDef],SystemArg	systemGen: buildArchetype(builder: var ArchetypeBuilder[ComponentDef]; arg: SystemArg)	
generateForHook	necsus/compiletime/systemGen.html#generateForHook,SystemArg,GenerateContext,string	systemGen: generateForHook(arg: SystemArg; details: GenerateContext; name: string): NimNode	
worldFields	necsus/compiletime/systemGen.html#worldFields,SystemArg,string	systemGen: worldFields(arg: SystemArg; name: string): seq[WorldField]	
nameOf	necsus/compiletime/systemGen.html#nameOf,GenerateContext,SystemArg	systemGen: nameOf(ctx: GenerateContext; arg: SystemArg): string	
systemArg	necsus/compiletime/systemGen.html#systemArg,Table[DirectiveGen,DirectiveSet[SystemArg]],SystemArg	systemGen: systemArg(directives: Table[DirectiveGen, DirectiveSet[SystemArg]];\n          arg: SystemArg): NimNode	
systemArg	necsus/compiletime/systemGen.html#systemArg,GenerateContext,SystemArg	systemGen: systemArg(ctx: GenerateContext; arg: SystemArg): NimNode	
